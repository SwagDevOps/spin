#!/usr/bin/env ruby
# frozen_string_literal: true

# Generate ``mimetype`` configuration for lighttpd.
#
# Sample of use:
#
# ```
# # vim: set ft=conf foldmethod=marker et :
#
# include_shell "confmimetype"
#
# mimetype.assign += (
#   ".css.map" => "application/json; charset=utf-8",
#   ".js.map"  => "application/json; charset=utf-8",
# )
# ```
#
# @see https://redmine.lighttpd.net/projects/1/wiki/Docs_Configuration
# @see https://www.w3.org/International/articles/http-charset/index
# @see https://github.com/mime-types/ruby-mime-types
# @see https://github.com/arno/tools/blob/master/confmimetype.py
class Confmimetype
  autoload(:ERB, 'erb')
  autoload(:MIME, 'mime-types')

  # @type [Hash{Symbol => MIME::Type::Columnar}]
  attr_reader :mimetypes

  # @type [String]
  attr_reader :charset

  TEMPLATE = %(mimetype.assign = (
  <% mimetypes.each do |ext, mime| %>
    <% unless %w(base64 7bit).include?(mime.encoding.to_s) %>
      ".<%= ext %>" => "<%= mime.to_s %>; charset=<%= charset %>",
    <% else %>
      ".<%= ext %>" => "<%= mime.to_s %>",
    <% end %>
  <% end %>
  ))

  private_constant :TEMPLATE

  # @param [String] charset
  def initialize(charset = 'utf-8')
    @charset = charset
    @mimetypes = make_mimes.sort.freeze
  end

  # @return [String]
  def render
    # @formatter:off
    context = lambda do
      Struct.new(:mimetypes, :charset).tap do |c|
        return c.new(self.mimetypes, self.charset)
      end
    end.call.instance_eval { binding }

    ERB.new(TEMPLATE).result(context)
       .lines.reject { |line| /^[ ]+$/ =~ line and line.strip.empty? }
       .join.strip + "\n"
    # @formatter:on
  end

  alias to_s render

  protected

  # @return [Hash{Symbol => MIME::Type::Columnar}]
  def make_mimes
    # @formatter:off
    {}.tap do |mimetypes|
      MIME::Types.map.reject { |mime| mime.extensions.empty? }.tap do |r|
        r.map { |mime| [mime, mime.extensions] }.to_h.each do |mime, extensions|
          extensions.reject! { |s| s =~ /^@/ }

          extensions.map(&:downcase.to_sym).each do |ext|
            mimetypes[ext] = mime unless mimetypes[ext]
          end
        end
      end
    end
    # @formatter:on
  end
end

if __FILE__ == $PROGRAM_NAME
  Confmimetype.new('utf-8').tap do |content|
    $stdout.write(content)
  end
end
